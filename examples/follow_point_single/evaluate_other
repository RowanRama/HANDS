import matplotlib.pyplot as plt
import pickle
import numpy as np
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D

def create_gif(outputs, gif_path="backbone_animation_RL.gif"):
    """
    Create a GIF of the backbone points for each instant with two views.
    """
    simulation_duration = outputs[-1]['time']
    # Extract the backbone points for each step
    backbone_points = [data['points_bb'] for data in outputs]
    # Extract the time stamps for the frames
    time_stamps = [data['time'] for data in outputs]

    # Calculate the total number of frames for the GIF
    fps = 10  # Frames per second for the GIF
    total_frames = int(simulation_duration * fps)

    # Sample frames to match the desired duration
    frame_indices = np.linspace(0, len(backbone_points) - 1, total_frames, dtype=int)
    backbone_points = [backbone_points[i] for i in frame_indices]
    time_stamps = [time_stamps[i] for i in frame_indices]

    # Set up the figure and 3D axes
    fig = plt.figure(figsize=(12, 6))

    # First subplot: 3D view
    ax1 = fig.add_subplot(121, projection='3d')
    ax1.set_xlim([-0.25, 0.25])
    ax1.set_ylim([-0.25, 0.25])
    ax1.set_zlim([0, 0.25])
    ax1.set_xlabel('X Position')
    ax1.set_ylabel('Y Position')
    ax1.set_zlabel('Z Position')
    ax1.set_title('3D View')

    # Second subplot: Top-down view (-z axis)
    ax2 = fig.add_subplot(122)
    ax2.set_xlim([-0.25, 0.25])
    ax2.set_ylim([-0.25, 0.25])
    ax2.set_xlabel('X Position')
    ax2.set_ylabel('Y Position')
    ax2.set_title('Top-Down View (-Z Axis)')

    # Initialize the line objects
    line1, = ax1.plot([], [], [], marker='o', linestyle='-', alpha=0.7)
    line2, = ax2.plot([], [], marker='o', linestyle='-', alpha=0.7)

    def update(frame):
        """
        Update function for the animation.
        """
        points = backbone_points[frame]

        # Update 3D view
        line1.set_data(points[0, :], points[1, :])
        line1.set_3d_properties(points[2, :])
        ax1.set_title(f"3D View - Time: {time_stamps[frame]:.2f} s")

        # Update top-down view
        line2.set_data(points[0, :], points[1, :])
        ax2.set_title(f"Top-Down View - Time: {time_stamps[frame]:.2f} s")

        return line1, line2

    # Create the animation
    ani = FuncAnimation(fig, update, frames=len(backbone_points), interval=1000 / fps, blit=True)

    # Save the animation as a GIF
    ani.save(gif_path, writer='imagemagick', fps=fps)
    print(f"GIF saved to {gif_path}")

with open("evaluation_outputs.pkl", "rb") as f:
    results = pickle.load(f)

# Plot tip trajectory for each target
for target_str, steps in results.items():
    create_gif(steps, gif_path=f"backbone_animation_{target_str}.gif")
    tip_positions = np.array([step["tip_pos"] for step in steps])
    times = [step["time"] for step in steps]

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.plot(tip_positions[0], tip_positions[1], tip_positions[2], label="Tip Trajectory")
    ax.scatter(*eval(target_str), c='r', label="Target", marker='x')
    ax.set_title(f"Tip trajectory to target {target_str}")
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")
    ax.legend()
    plt.show()
